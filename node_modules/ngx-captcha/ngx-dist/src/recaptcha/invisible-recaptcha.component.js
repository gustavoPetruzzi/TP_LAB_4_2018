"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var base_recaptcha_component_1 = require("./base-recaptcha.component");
var recaptcha_type_enum_1 = require("./recaptcha-type.enum");
var recaptcha_config_1 = require("./recaptcha.config");
var InvisibleReCaptchaComponent = /** @class */ (function (_super) {
    __extends(InvisibleReCaptchaComponent, _super);
    function InvisibleReCaptchaComponent(renderer, zone, globalConfig) {
        var _this = _super.call(this, renderer, zone, recaptcha_type_enum_1.ReCaptchaType.InvisibleReCaptcha, globalConfig) || this;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.globalConfig = globalConfig;
        /**
           * This size representing invisible captcha
           */
        _this.size = 'invisible';
        /**
           * Badge
           */
        _this.badge = 'bottomright';
        return _this;
    }
    InvisibleReCaptchaComponent.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
    };
    /**
     * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
     */
    /**
       * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
       */
    InvisibleReCaptchaComponent.prototype.execute = /**
       * Programatically invoke the reCAPTCHA check. Used if the invisible reCAPTCHA is on a div instead of a button.
       */
    function () {
        // execute captcha
        this.reCaptchaApi.execute(this.captchaElemPrefix);
    };
    InvisibleReCaptchaComponent.prototype.captchaSpecificSetup = function () {
    };
    /**
    * Gets reCaptcha properties
    */
    /**
      * Gets reCaptcha properties
      */
    InvisibleReCaptchaComponent.prototype.getCaptchaProperties = /**
      * Gets reCaptcha properties
      */
    function () {
        var _this = this;
        return {
            'sitekey': this._siteKey,
            'callback': function (response) { return _this.zone.run(function () { return _this.handleCallback(response); }); },
            'badge': this.badge,
            'type': this.type,
            'tabindex': this.tabIndex,
            'size': this.size
        };
    };
    InvisibleReCaptchaComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngx-invisible-recaptcha',
                    template: "\n  <div #captchaScriptElem></div>\n  <div #captchaWrapperElem></div>"
                },] },
    ];
    /** @nocollapse */
    InvisibleReCaptchaComponent.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.NgZone, },
        { type: recaptcha_config_1.NgxCaptchaConfig, decorators: [{ type: core_1.Optional },] },
    ]; };
    InvisibleReCaptchaComponent.propDecorators = {
        "badge": [{ type: core_1.Input },],
        "hl": [{ type: core_1.Input },],
    };
    return InvisibleReCaptchaComponent;
}(base_recaptcha_component_1.BaseReCaptchaComponent));
exports.InvisibleReCaptchaComponent = InvisibleReCaptchaComponent;
