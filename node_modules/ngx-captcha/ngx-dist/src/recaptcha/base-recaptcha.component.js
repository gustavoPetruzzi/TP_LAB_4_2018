"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var recaptcha_type_enum_1 = require("./recaptcha-type.enum");
var BaseReCaptchaComponent = /** @class */ (function () {
    function BaseReCaptchaComponent(renderer, zone, recaptchaType, globalConfig) {
        this.renderer = renderer;
        this.zone = zone;
        this.recaptchaType = recaptchaType;
        this.globalConfig = globalConfig;
        this.setupAfterLoad = false;
        /**
            * Name of the global callback
            */
        this.windowOnLoadCallbackProperty = 'ngx_onload_callback_' + this.getPseudoUniqueNumber();
        /**
             * Name of the global reCaptcha property
             */
        this.globalReCaptchaProperty = 'grecaptcha';
        /**
             * Prefix of the captcha element
             */
        this.captchaElemPrefix = 'ngx_captcha_id_';
        /**
             * Type
             */
        this.type = 'image';
        /**
            * Tab index
            */
        this.tabIndex = 0;
        /**
             * Called when captcha receives successful response.
             * Captcha response token is passed to event.
             */
        this.success = new core_1.EventEmitter();
        /**
            * Called when captcha is loaded. Event receives id of the captcha
            */
        this.load = new core_1.EventEmitter();
        /**
            * Called when captcha is loaded & ready. I.e. when you need to execute captcha on component load.
            */
        this.ready = new core_1.EventEmitter();
        /**
             * If enabled, captcha will reset after receiving success response. This is useful
             * when invisible captcha need to be resolved multiple times on same page
             */
        this.resetCaptchaAfterSuccess = false;
        /**
             * Indicates if captcha is loaded
             */
        this.isLoaded = false;
    }
    BaseReCaptchaComponent.prototype.getGlobalSiteKey = function () {
        if (this.globalConfig) {
            // Invisible captcha
            if (this.recaptchaType === recaptcha_type_enum_1.ReCaptchaType.InvisibleReCaptcha) {
                if (!this.globalConfig.invisibleCaptchaSiteKey) {
                    throw Error("SiteKey for invisible reCaptcha is not set!");
                }
                if (this.globalConfig.invisibleCaptchaSiteKey instanceof Function) {
                    return this.globalConfig.invisibleCaptchaSiteKey();
                }
                else {
                    return this.globalConfig.invisibleCaptchaSiteKey;
                }
                // recaptcha 2
            }
            else if (this.recaptchaType === recaptcha_type_enum_1.ReCaptchaType.ReCaptcha2) {
                if (!this.globalConfig.reCaptcha2SiteKey) {
                    throw Error("SiteKey for reCaptcha2 is not set!");
                }
                if (this.globalConfig.reCaptcha2SiteKey instanceof Function) {
                    return this.globalConfig.reCaptcha2SiteKey();
                }
                else {
                    return this.globalConfig.reCaptcha2SiteKey;
                }
            }
            else {
                throw Error("Unsupported captcha type '" + this.recaptchaType + "'!");
            }
        }
    };
    BaseReCaptchaComponent.prototype.ngOnChanges = function (changes) {
        if (!this.siteKey) {
            // use global site key if key is not available
            this._siteKey = this.getGlobalSiteKey();
        }
        else {
            // use comnponent site key
            if (this.siteKey instanceof Function) {
                this._siteKey = this.siteKey();
            }
            else {
                this._siteKey = this.siteKey;
            }
        }
        this.setupComponent();
    };
    BaseReCaptchaComponent.prototype.ngOnDestroy = function () {
        window[this.windowOnLoadCallbackProperty] = {};
        window[this.globalReCaptchaProperty] = {};
    };
    /**
     * Gets captcha response as per reCaptcha docs
    */
    /**
         * Gets captcha response as per reCaptcha docs
        */
    BaseReCaptchaComponent.prototype.getResponse = /**
         * Gets captcha response as per reCaptcha docs
        */
    function () {
        return this.reCaptchaApi.getResponse(this.captchaId);
    };
    /**
     * Gets Id of captcha widget
    */
    /**
         * Gets Id of captcha widget
        */
    BaseReCaptchaComponent.prototype.getCaptchaId = /**
         * Gets Id of captcha widget
        */
    function () {
        return this.captchaId;
    };
    /**
    * Resets captcha
    */
    /**
        * Resets captcha
        */
    BaseReCaptchaComponent.prototype.resetCaptcha = /**
        * Resets captcha
        */
    function () {
        this.reCaptchaApi.reset(this.captchaId);
    };
    /**
     * Gets last submitted captcha response
    */
    /**
         * Gets last submitted captcha response
        */
    BaseReCaptchaComponent.prototype.getCurrentResponse = /**
         * Gets last submitted captcha response
        */
    function () {
        return this.currentResponse;
    };
    /**
     * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
    */
    /**
         * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
        */
    BaseReCaptchaComponent.prototype.reloadCaptcha = /**
         * Reload captcha. Useful when properties (i.e. theme) changed and captcha need to reflect them
        */
    function () {
        this.setupComponent();
    };
    BaseReCaptchaComponent.prototype.ensureCaptchaElem = function (captchaElemId) {
        var captchaElem = document.getElementById(captchaElemId);
        if (!captchaElem) {
            throw Error("Captcha element with id '" + captchaElemId + "' was not found");
        }
        // assign captcha alem
        this.captchaElem = captchaElem;
    };
    /**
     * Responsible for instantiating captcha element
    */
    /**
         * Responsible for instantiating captcha element
        */
    BaseReCaptchaComponent.prototype.renderReCaptcha = /**
         * Responsible for instantiating captcha element
        */
    function () {
        this.captchaId = this.reCaptchaApi.render(this.captchaElemId, this.getCaptchaProperties());
        this.ready.next();
    };
    /**
     * Called when captcha receives response
     * @param callback Callback
     */
    /**
         * Called when captcha receives response
         * @param callback Callback
         */
    BaseReCaptchaComponent.prototype.handleCallback = /**
         * Called when captcha receives response
         * @param callback Callback
         */
    function (callback) {
        this.currentResponse = callback;
        this.success.next(callback);
        if (this.resetCaptchaAfterSuccess) {
            this.resetCaptcha();
        }
    };
    /**
     * Registers reCaptcha script if its not available
    */
    /**
         * Registers reCaptcha script if its not available
        */
    BaseReCaptchaComponent.prototype.ensureReCaptchaScript = /**
         * Registers reCaptcha script if its not available
        */
    function () {
        window[this.globalReCaptchaProperty] = {};
        this.reCaptchaApi = {};
        this.registerReCaptchaScript();
    };
    /**
     * Add script to page with reference to captcha API. This has to be done manually
     * as we want to avoid adding script to main index.html
    */
    /**
         * Add script to page with reference to captcha API. This has to be done manually
         * as we want to avoid adding script to main index.html
        */
    BaseReCaptchaComponent.prototype.registerReCaptchaScript = /**
         * Add script to page with reference to captcha API. This has to be done manually
         * as we want to avoid adding script to main index.html
        */
    function () {
        var script = document.createElement('script');
        script.innerHTML = '';
        script.src =
            "https://www.google.com/recaptcha/api.js?onload=" + this.windowOnLoadCallbackProperty + "&render=explicit" + this.getLanguageParam();
        script.async = true;
        script.defer = true;
        this.captchaScriptElem.nativeElement.appendChild(script);
    };
    BaseReCaptchaComponent.prototype.getLanguageParam = function () {
        if (!this.hl) {
            return '';
        }
        return "&hl=" + this.hl;
    };
    BaseReCaptchaComponent.prototype.getPseudoUniqueNumber = function () {
        return new Date().getUTCMilliseconds() + Math.floor(Math.random() * 9999);
    };
    /**
     * Checks if reCaptcha Api is defined. It may happen that when navigating from angular component to another
     * via router, the Api was already loaded previously. In such cases, do not render script again.
    */
    /**
         * Checks if reCaptcha Api is defined. It may happen that when navigating from angular component to another
         * via router, the Api was already loaded previously. In such cases, do not render script again.
        */
    BaseReCaptchaComponent.prototype.isReCaptchaApiDefined = /**
         * Checks if reCaptcha Api is defined. It may happen that when navigating from angular component to another
         * via router, the Api was already loaded previously. In such cases, do not render script again.
        */
    function () {
        if (!window[this.globalReCaptchaProperty]) {
            return false;
        }
        return true;
    };
    BaseReCaptchaComponent.prototype.setupComponent = function () {
        var _this = this;
        // captcha specific setup
        this.captchaSpecificSetup();
        // create captcha wrapper
        this.createAndSetCaptchaElem();
        // we need to patch the callback through global variable, otherwise callback is not accessible
        // note: https://github.com/Enngage/ngx-captcha/issues/2
        window[this.windowOnLoadCallbackProperty] = (function () {
            return _this.zone.run(_this.onloadCallback.bind(_this));
        });
        // create and put reCaptcha script to page
        this.ensureReCaptchaScript();
    };
    /**
    * Called when google's recaptcha script is ready
    */
    /**
        * Called when google's recaptcha script is ready
        */
    BaseReCaptchaComponent.prototype.onloadCallback = /**
        * Called when google's recaptcha script is ready
        */
    function () {
        // assign reference to reCaptcha Api once its loaded
        this.reCaptchaApi = grecaptcha;
        if (!this.reCaptchaApi) {
            throw Error("ReCaptcha Api was not initialized correctly");
        }
        // loaded flag
        this.isLoaded = true;
        // fire load event
        this.load.next();
        // render captcha
        this.renderReCaptcha();
        // setup component if it was flagges as such
        if (this.setupAfterLoad) {
            this.setupAfterLoad = false;
            this.setupComponent();
        }
    };
    BaseReCaptchaComponent.prototype.generateNewElemId = function () {
        return this.captchaElemPrefix + this.getPseudoUniqueNumber();
    };
    BaseReCaptchaComponent.prototype.createAndSetCaptchaElem = function () {
        // generate new captcha id
        this.captchaElemId = this.generateNewElemId();
        if (!this.captchaElemId) {
            throw Error("Captcha elem Id is not set");
        }
        // remove old html
        this.captchaWrapperElem.nativeElement.innerHTML = '';
        // create new wrapper for captcha
        var newElem = this.renderer.createElement('div');
        newElem.id = this.captchaElemId;
        this.renderer.appendChild(this.captchaWrapperElem.nativeElement, newElem);
        // update captcha elem
        this.ensureCaptchaElem(this.captchaElemId);
    };
    BaseReCaptchaComponent.propDecorators = {
        "siteKey": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "hl": [{ type: core_1.Input },],
        "tabIndex": [{ type: core_1.Input },],
        "success": [{ type: core_1.Output },],
        "load": [{ type: core_1.Output },],
        "ready": [{ type: core_1.Output },],
        "captchaWrapperElem": [{ type: core_1.ViewChild, args: ['captchaWrapperElem',] },],
        "captchaScriptElem": [{ type: core_1.ViewChild, args: ['captchaScriptElem',] },],
    };
    return BaseReCaptchaComponent;
}());
exports.BaseReCaptchaComponent = BaseReCaptchaComponent;
