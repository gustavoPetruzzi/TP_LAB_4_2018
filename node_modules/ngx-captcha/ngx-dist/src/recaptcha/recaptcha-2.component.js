"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var base_recaptcha_component_1 = require("./base-recaptcha.component");
var recaptcha_type_enum_1 = require("./recaptcha-type.enum");
var recaptcha_config_1 = require("./recaptcha.config");
var ReCaptcha2Component = /** @class */ (function (_super) {
    __extends(ReCaptcha2Component, _super);
    function ReCaptcha2Component(renderer, zone, globalConfig) {
        var _this = _super.call(this, renderer, zone, recaptcha_type_enum_1.ReCaptchaType.ReCaptcha2, globalConfig) || this;
        _this.renderer = renderer;
        _this.zone = zone;
        _this.globalConfig = globalConfig;
        /**
          * Name of the global expire callback
          */
        _this.windowOnErrorCallbackProperty = 'ngx_captcha_error_callback';
        /**
          * Name of the global error callback
          */
        _this.windowOnExpireCallbackProperty = 'ngx_captcha_expire_callback';
        /**
           * Theme
           */
        _this.theme = 'light';
        /**
          * Size
          */
        _this.size = 'normal';
        /**
          * Expired callback
          */
        _this.expire = new core_1.EventEmitter();
        /**
          * Error callback
          */
        _this.error = new core_1.EventEmitter();
        return _this;
    }
    ReCaptcha2Component.prototype.ngOnChanges = function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
    };
    ReCaptcha2Component.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        window[this.windowOnErrorCallbackProperty] = {};
        window[this.windowOnExpireCallbackProperty] = {};
    };
    ReCaptcha2Component.prototype.captchaSpecificSetup = function () {
        this.registerCallbacks();
    };
    /**
     * Gets reCaptcha properties
    */
    /**
       * Gets reCaptcha properties
      */
    ReCaptcha2Component.prototype.getCaptchaProperties = /**
       * Gets reCaptcha properties
      */
    function () {
        var _this = this;
        return {
            'sitekey': this._siteKey,
            'callback': function (response) { return _this.zone.run(function () { return _this.handleCallback(response); }); },
            'expired-callback': function () { return _this.zone.run(function () { return _this.handleExpireCallback(); }); },
            'error-callback': function () { return _this.zone.run(function () { return _this.handleErrorCallback(); }); },
            'theme': this.theme,
            'type': this.type,
            'size': this.size,
            'tabindex': this.tabIndex
        };
    };
    /**
     * Registers global callbacks
    */
    /**
       * Registers global callbacks
      */
    ReCaptcha2Component.prototype.registerCallbacks = /**
       * Registers global callbacks
      */
    function () {
        window[this.windowOnErrorCallbackProperty] = this.handleErrorCallback.bind(this);
        window[this.windowOnExpireCallbackProperty] = this.handleExpireCallback.bind(this);
    };
    /**
     * Handles error callback
    */
    /**
       * Handles error callback
      */
    ReCaptcha2Component.prototype.handleErrorCallback = /**
       * Handles error callback
      */
    function () {
        this.error.next();
    };
    /**
     * Handles expired callback
     */
    /**
       * Handles expired callback
       */
    ReCaptcha2Component.prototype.handleExpireCallback = /**
       * Handles expired callback
       */
    function () {
        this.expire.next();
        // reset captcha on expire callback
        this.resetCaptcha();
    };
    ReCaptcha2Component.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'ngx-recaptcha2',
                    template: "\n  <div #captchaScriptElem></div>\n  <div #captchaWrapperElem></div>"
                },] },
    ];
    /** @nocollapse */
    ReCaptcha2Component.ctorParameters = function () { return [
        { type: core_1.Renderer2, },
        { type: core_1.NgZone, },
        { type: recaptcha_config_1.NgxCaptchaConfig, decorators: [{ type: core_1.Optional },] },
    ]; };
    ReCaptcha2Component.propDecorators = {
        "theme": [{ type: core_1.Input },],
        "size": [{ type: core_1.Input },],
        "hl": [{ type: core_1.Input },],
        "expire": [{ type: core_1.Output },],
        "error": [{ type: core_1.Output },],
    };
    return ReCaptcha2Component;
}(base_recaptcha_component_1.BaseReCaptchaComponent));
exports.ReCaptcha2Component = ReCaptcha2Component;
